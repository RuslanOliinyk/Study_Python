import json
import os


class Contact:
    def __init__(self, name, phone, email):
        self.name = name
        self.phone = phone
        self.email = email

    def to_dict(self):
        return {"name": self.name, "phone": self.phone, "email": self.email}

    def __str__(self):
        return f"Name: {self.name}, Phone: {self.phone}, Email: {self.email}"


class ContactManager:
    FILE_NAME = "contact_list.json"

    def __init__(self):
        self.contacts = self.load_contacts()

    def load_contacts(self):
        if os.path.exists(self.FILE_NAME):
            try:
                with open(self.FILE_NAME, "r", encoding="utf-8") as file:
                    return json.load(file)
            except json.JSONDecodeError:
                return []
        return []

    def save_contacts(self):
        with open(self.FILE_NAME, "w", encoding="utf-8") as file:
            json.dump(self.contacts, file, indent=4, ensure_ascii=False)

    def add_contact(self, contact):
        self.contacts.append(contact.to_dict())
        self.save_contacts()
        print("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

    def show_contacts(self):
        if not self.contacts:
            print("‚ùå –í –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –Ω–µ–º–∞—î –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤")
            return None

        print("\nüìú –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤:")
        for i, cont in enumerate(self.contacts, 1):
            print(f"{i}. {cont['name']} - {cont['phone']} - {cont['email']}")
        return self.contacts

    def search_by_name(self, name):
        found = [c for c in self.contacts if name.lower() in c["name"].lower()]
        self.print_search_results(found, "—ñ–º'—è–º", name)

    def search_by_phone(self, phone):
        found = [c for c in self.contacts if phone in c["phone"]]
        self.print_search_results(found, "–Ω–æ–º–µ—Ä–æ–º", phone)

    def print_search_results(self, results, search_type, value):
        if results:
            print(f"\nüîç –ó–Ω–∞–π–¥–µ–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∑–∞ {search_type} {value}:")
            for cont in results:
                print(f"{cont['name']} - {cont['phone']} - {cont['email']}")
        else:
            print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∑ {search_type} {value}")

    def change_contact(self, num, new_contact):
        if 1 <= num <= len(self.contacts):
            self.contacts[num - 1] = new_contact.to_dict()
            self.save_contacts()
            print("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            print("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —ñ—Å–Ω—É—î!")

    def delete_contact(self, num):
        if 1 <= num <= len(self.contacts):
            deleted_contact = self.contacts.pop(num - 1)
            self.save_contacts()
            print(f"üóëÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç \"{deleted_contact['name']}\" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
        else:
            print("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —ñ—Å–Ω—É—î!")


def get_valid_number(prompt, min_value, max_value):
    while True:
        try:
            value = int(input(prompt))
            if min_value <= value <= max_value:
                return value
            else:
                print(f"‚ùó –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ {min_value} –¥–æ {max_value}")
        except ValueError:
            print("‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!")


manager_contact = ContactManager()

while True:
    print("\nüìû –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤")
    list_option = [
        "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç",
        "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤",
        "–®—É–∫–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç",
        "–ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç",
        "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç",
        "–í–∏–π—Ç–∏ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏"
    ]

    for i, option in enumerate(list_option, 1):
        print(f"{i}. {option}")

    ask_action = get_valid_number("\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-6): ", 1, 6)

    if ask_action == 1:
        name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è: ")
        while True:
            phone = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: +38 ")
            if phone.startswith("0") and len(phone) == 10:
                break
            else:
                print("‚ùó –í–≤–µ–¥—ñ—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ü–∏—Ñ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É!")

        email = input("–í–≤–µ–¥—ñ—Ç—å Email –∞–¥—Ä–µ—Å: ")

        contact = Contact(name, phone, email)
        manager_contact.add_contact(contact)

    elif ask_action == 2:
        manager_contact.show_contacts()

    elif ask_action == 3:
        print("1. –®—É–∫–∞—Ç–∏ –∑–∞ —ñ–º'—è–º")
        print("2. –®—É–∫–∞—Ç–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        ask_search = get_valid_number("–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø–æ—à—É–∫—É (1,2): ", 1, 2)

        if ask_search == 1:
            search_name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è –ø–æ—à—É–∫—É: ")
            manager_contact.search_by_name(search_name)
        else:
            search_phone = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø–æ—à—É–∫—É: ")
            manager_contact.search_by_phone(search_phone)

    elif ask_action == 4:
        contacts = manager_contact.show_contacts()
        if contacts:
            num = get_valid_number("\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏: ", 1, len(contacts))

            change_name = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è: ")
            while True:
                change_phone = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: +38 ")
                if change_phone.startswith("0") and len(change_phone) == 10:
                    break
                else:
                    print("‚ùó –í–≤–µ–¥—ñ—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ü–∏—Ñ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É!")

            change_email = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π Email –∞–¥—Ä–µ—Å: ")

            new_contact = Contact(change_name, change_phone, change_email)
            manager_contact.change_contact(num, new_contact)

    elif ask_action == 5:
        contacts = manager_contact.show_contacts()
        if contacts:
            num = get_valid_number("\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏: ", 1, len(contacts))
            manager_contact.delete_contact(num)

    elif ask_action == 6:
        print("üëã –í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏...")
        break
